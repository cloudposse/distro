# Build Environment
export ARCH ?= amd64
export OS ?= $(shell uname -s | tr '[:upper:]' '[:lower:'])
export OS_ARCH ?= $(shell uname -m)
export INSTALL_PATH ?= /usr/local/bin
export CURL ?= curl --retry 3 --retry-delay 5 --fail -sSL
export LOCAL_BIN := ../../bin
export PATH := $(PATH):$(LOCAL_BIN)
export SHELL := /bin/bash

export TMP ?= /tmp

# Package details
export PACKAGE_ENABLED ?= true
export PACKAGE_NAME ?= $(notdir $(CURDIR))
export PACKAGE_REPO_NAME ?= $(PACKAGE_NAME)
export PACKAGE_EXE ?= $(PACKAGE_NAME)
export PACKAGE_DESCRIPTION ?= $(shell cat DESCRIPTION 2>/dev/null)
export PACKAGE_VERSION ?= $(shell cat VERSION 2>/dev/null)
export PACKAGE_RELEASE ?= $(shell cat RELEASE 2>/dev/null)
export PACKAGE_LICENSE ?= $(shell cat LICENSE 2>/dev/null)
export PACKAGE_HOMEPAGE_URL ?= https://github.com/$(VENDOR)/$(PACKAGE)
export PACKAGE_REPO_URL ?= https://github.com/$(VENDOR)/$(PACKAGE_REPO_NAME)

ifeq ($(strip $(PACKAGE_VERSION_PIN)),)
	export PACKAGE_VERSION_TARGET = CURRENT_VERSION
else
	export PACKAGE_VERSION_TARGET = PINNED_VERSION
endif

export AUTO_UPDATE_ENABLED ?= true

# Permit version to be overridden on the command line using PACKAGE_VERSION (e.g. FIGURINE_VERSION=0.3.0)
VERSION_ENV = $(shell basename $$(pwd) | tr '[:lower:]' '[:upper:]')_VERSION
ifneq ($($(VERSION_ENV)),)
	PACKAGE_VERSION=$($(VERSION_ENV))
endif

# Macros to download a binary release from GitHub and install it
# $(call github_download_binary_release,version,repo,asset)
define download_binary
	mkdir -p $(INSTALL_PATH)
	$(CURL) -o $(INSTALL_PATH)/$(PACKAGE_EXE) $(DOWNLOAD_URL) && chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
endef

download/binary:
	$(call download_binary)

define download_binary_gz
	mkdir -p $(INSTALL_PATH)
	$(CURL) -o $(INSTALL_PATH)/$(PACKAGE_NAME).gz $(DOWNLOAD_URL)
	gunzip -f -k -q $(INSTALL_PATH)/$(PACKAGE_NAME).gz
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	rm -f $(INSTALL_PATH)/$(PACKAGE_NAME).gz
endef

download/binary/gz:
	$(call download_binary_gz)

define download_binary_bz2
	mkdir -p $(INSTALL_PATH)
	$(CURL) -o $(INSTALL_PATH)/$(PACKAGE_NAME).bz2 $(DOWNLOAD_URL)
	bzip2 -d -f -k -q $(INSTALL_PATH)/$(PACKAGE_NAME).bz2
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	rm -f $(INSTALL_PATH)/$(PACKAGE_NAME).bz2
endef

download/binary/bz2:
	$(call download_binary_bz2)

define download_tarball
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -zx -C '$(TMP)/$(PACKAGE_NAME)'
	find $(TMP)/$(PACKAGE_NAME) -type f -name '$(PACKAGE_EXE)*' | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/tarball:
	$(call download_tarball)

define download_tar_bz2
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -jx -C $(TMP)/$(PACKAGE_NAME)
	find $(TMP)/$(PACKAGE_NAME) -type f -name $(PACKAGE_NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/tar/bz2:
	$(call download_tar_bz2)

define download_tar_gz
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -zx -C $(TMP)/$(PACKAGE_NAME)
	find $(TMP)/$(PACKAGE_NAME) -type f -name $(PACKAGE_NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/tar/gz:
	$(call download_tar_gz)

define download_tar_xz
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -Jx -C $(TMP)/$(PACKAGE_NAME)
	find $(TMP)/$(PACKAGE_NAME) -type f -name $(PACKAGE_NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/tar/xz:
	$(call download_tar_xz)

define download_zip
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -L -o $(TMP)/$(PACKAGE_NAME)/$(PACKAGE_NAME).zip $(DOWNLOAD_URL)
	unzip $(TMP)/$(PACKAGE_NAME)/$(PACKAGE_NAME).zip -d $(TMP)/$(PACKAGE_NAME)
	find $(TMP)/$(PACKAGE_NAME) -type f -name $(PACKAGE_NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/zip:
	$(call download_zip)

define download_gz
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
	mkdir -p $(TMP)/$(PACKAGE_NAME)
	$(CURL) -L -o $(TMP)/$(PACKAGE_NAME)/$(PACKAGE_NAME).gz $(DOWNLOAD_URL)
	gunzip $(TMP)/$(PACKAGE_NAME)/$(PACKAGE_NAME).gz
	find $(TMP)/$(PACKAGE_NAME) -type f -name $(PACKAGE_NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(PACKAGE_EXE)
	chmod +x $(INSTALL_PATH)/$(PACKAGE_EXE)
	[ -n "$(TMP)" ] && [ -n "$(PACKAGE_NAME)" ] && rm -rf "$(TMP)/$(PACKAGE_NAME)"
endef

download/gz:
	$(call download_gz)

default: info

# Only works if current working directory is under vendor/
$(LOCAL_BIN)/vert: INSTALL_PATH = $(LOCAL_BIN)
$(LOCAL_BIN)/vert:
	$(MAKE) -C ../vert download/binary

DESCRIPTION:
	@github-repo-metadata $(VENDOR) $(PACKAGE_REPO_NAME) "index" .description | tee DESCRIPTION

# In order to support static configuration of version, the VERSION file should be
# considered up-to-date unless explicitly updated via the "update" target
# VERSION:

LICENSE:
	@github-repo-metadata $(VENDOR) $(PACKAGE_REPO_NAME) "license" .license.spdx_id | tr '[:lower:]' '[:upper:]' | tee LICENSE

RELEASE: VERSION LICENSE DESCRIPTION
	@if [ ! -f RELEASE ]; then \
		echo "0" | tee RELEASE; \
		git add RELEASE; \
	elif [ -n "$$(git status -s `pwd` | grep -v RELEASE)" ]; then \
		if [ -n "$$(git status -s `pwd` | grep VERSION)" ]; then \
			echo "0" | tee RELEASE; \
			git add RELEASE; \
		elif [ -z "$$(git status -s `pwd` | grep RELEASE)" ]; then \
			echo "$$(($${RELEASE}+1))" | tee RELEASE; \
			git add RELEASE; \
		fi; \
	fi

init: AUTO_UPDATE_ENABLED=true
init: $(PACKAGE_VERSION_TARGET) LICENSE DESCRIPTION RELEASE

update: $(PACKAGE_VERSION_TARGET) RELEASE

force-update: AUTO_UPDATE_ENABLED=true
force-update: $(PACKAGE_VERSION_TARGET) RELEASE

sleep: RATE_LIMIT=0
sleep:
	sleep $(RATE_LIMIT)

auto-update:
	@if [ "$${AUTO_UPDATE_ENABLED:-true}" == "true" ]; then \
		$(MAKE) --quiet --silent --no-print-directory update; \
		exit $?; \
	else \
		echo "Automatic updates disabled for $${PACKAGE_NAME}"; \
		exit 0; \
	fi

# The only way to tell if VERSION is up to date is to query the source via the internet
.PHONY: CURRENT_VERSION PINNED_VERSION

# Update the VERSION file only if it would change, to avoid triggering unnecessary builds
CURRENT_VERSION: API=releases/latest
CURRENT_VERSION: QUERY=.tag_name
CURRENT_VERSION:
	@local_version=$$(cat VERSION || echo 0); \
	current_version=$$(env PATH='$(PATH)' github-repo-metadata $(VENDOR) $(PACKAGE_REPO_NAME) '$(API)' '$(QUERY)' | sed 's/^v//'); \
	if [ $$? -ne 0 ]; then \
		exit 1; \
	elif [ "$${current_version}" == "null" -o -z "$${current_version}" ]; then \
		echo "ERROR: failed to obtain current version for $(VENDOR)/$(PACKAGE_REPO_NAME) (got: $${current_version})" >&2; \
		exit 1; \
	elif [ "$${local_version}" != "$${current_version}" ]; then \
		if [ $$(semver "$${current_version}" "$${local_version}" ) != "1" ]; then \
			echo "NOT \"Upgrading\" $(PACKAGE_NAME) from $${local_version} to OLDER $${current_version}" >&2; \
		elif [ "$${AUTO_UPDATE_ENABLED:-true}" == "true" ]; then \
		 	echo "Upgrading $(PACKAGE_NAME) from $${local_version} to $${current_version}"; \
			echo "$${current_version}" > VERSION; \
		else \
			echo "NOT \"Upgrading\" $(PACKAGE_NAME) from $${local_version} to $${current_version} because auto-update is disabled" >&2; \
		fi \
	fi

PINNED_VERSION: API=releases?per_page=100
PINNED_VERSION: QUERY=.[].tag_name
PINNED_VERSION: $(LOCAL_BIN)/vert
	@local_version=$$(cat VERSION || echo 0); \
	current_version=$$(env PATH='$(PATH)' vert -s '$(PACKAGE_VERSION_PIN)' \
	  $$(env PATH='$(PATH)' github-repo-metadata $(VENDOR) $(PACKAGE_REPO_NAME) '$(API)' '$(QUERY)') | tail -1); \
	if [ $$? -ne 0 ]; then \
		exit 1; \
	elif [ "$${current_version}" == "null" -o -z "$${current_version}" ]; then \
		echo "ERROR: failed to obtain version matching '$(PACKAGE_VERSION_PIN)' for $(VENDOR)/$(PACKAGE_REPO_NAME) (got: $${current_version})" >&2; \
		exit 1; \
	elif [ "$${local_version}" != "$${current_version}" ]; then \
		if [ $$(semver "$${current_version}" "$${local_version}" ) != "1" ]; then \
			echo "NOT \"Upgrading\" $(PACKAGE_NAME) from $${local_version} to OLDER $${current_version}" >&2; \
		elif [ "$${AUTO_UPDATE_ENABLED:-true}" == "true" ]; then \
		 	echo "Upgrading $(PACKAGE_NAME) from $${local_version} to $${current_version}"; \
			echo "$${current_version}" > VERSION; \
		else \
			echo "NOT \"Upgrading\" $(PACKAGE_NAME) from $${local_version} to $${current_version} because auto-update is disabled" >&2; \
		fi \
	fi


info:
	@printf "%-20s %s\n" "Vendor:" "$(VENDOR)"
	@printf "%-20s %s\n" "Package:" "$(PACKAGE_NAME)"
	@printf "%-20s %s\n" "Version:" "$(PACKAGE_VERSION)"
	@printf "%-20s %s\n" "License:" "$(PACKAGE_LICENSE)"
	@printf "%-20s %s\n" "Arch:" "$(ARCH)"
	@printf "%-20s %s\n" "OS:" "$(OS)"
	@printf "%-20s %s\n" "Homepage URL:" "$(PACKAGE_HOMEPAGE_URL)"
	@printf "%-20s %s\n" "Repo URL:" "$(PACKAGE_REPO_URL)"
	@printf "%-20s %s\n" "Download URL:" "$(DOWNLOAD_URL)"
	@printf "%-20s %s\n" "Install Path:" "$(INSTALL_PATH)"

info/short:
	@printf "%-25s %-10s %s\n" "$${PACKAGE_NAME}" "$${PACKAGE_VERSION}" "$${PACKAGE_DESCRIPTION}"

info/md:
	@printf "[![%s](https://github.com/cloudposse/packages/workflows/%s/badge.svg?branch=master)](https://github.com/cloudposse/packages/actions?query=workflow%%3A%s) | %-10s | %s\n" "$${PACKAGE_NAME}" "$${PACKAGE_NAME}" "$${PACKAGE_NAME}" "$${PACKAGE_VERSION}" "$${PACKAGE_DESCRIPTION}"

info/github: FORMAT="::set-output name=%s::%s\n"
info/github:
	@printf $(FORMAT) "vendor" "$(VENDOR)"
	@printf $(FORMAT) "package_name" "$(PACKAGE_NAME)"
	@printf $(FORMAT) "apk_package_enabled" "$(APK_PACKAGE_ENABLED)"
	@printf $(FORMAT) "deb_package_enabled" "$(DEB_PACKAGE_ENABLED)"
	@printf $(FORMAT) "package_enabled" "$(PACKAGE_ENABLED)"
	@printf $(FORMAT) "package_version" "$(PACKAGE_VERSION)"
	@printf $(FORMAT) "package_license" "$(PACKAGE_LICENSE)"
	@printf $(FORMAT) "arch" "$(ARCH)"
	@printf $(FORMAT) "os" "$(OS)"
	@printf $(FORMAT) "package_homepage_url" "$(PACKAGE_HOMEPAGE_URL)"
	@printf $(FORMAT) "package_repo_url" "$(PACKAGE_REPO_URL)"
	@printf $(FORMAT) "download_url" "$(DOWNLOAD_URL)"
	@printf $(FORMAT) "install_path" "$(INSTALL_PATH)"

