# Build Environment
export ARCH ?= amd64
export OS ?= $(shell uname -s | tr '[:upper:]' '[:lower:'])
export OS_ARCH ?= $(shell uname -m)
export INSTALL_PATH ?= /usr/local/bin
export CURL ?= curl --fail -sSL
export PATH := $(PATH):../../bin/

export TMP ?= /tmp

# Package details
export NAME ?= $(notdir $(CURDIR))
export REPO_NAME ?= $(NAME)
export EXE ?= $(NAME)
export DESCRIPTION ?= $(shell cat DESCRIPTION 2>/dev/null)
export VERSION ?= $(shell cat VERSION 2>/dev/null)
export RELEASE ?= $(shell cat RELEASE 2>/dev/null)
export LICENSE ?= $(shell cat LICENSE 2>/dev/null)
export HOMEPAGE_URL ?= https://github.com/$(VENDOR)/$(PACKAGE)
export REPO_URL ?= https://github.com/$(VENDOR)/$(REPO_NAME)

# Permit version to be overridden on the command line using PACKAGE_VERSION (e.g. FIGURINE_VERSION=0.3.0)
VERSION_ENV = $(shell basename $$(pwd) | tr '[:lower:]' '[:upper:]')_VERSION
ifneq ($($(VERSION_ENV)),) 
	VERSION=$($(VERSION_ENV))
endif

# Macros to download a binary release from GitHub and install it
# $(call github_download_binary_release,version,repo,asset)
download_binary = $(CURL) -o $(INSTALL_PATH)/$(NAME) $(DOWNLOAD_URL) && chmod +x $(INSTALL_PATH)/$(NAME)
define download_tarball
	rm -rf $(TMP)/$(NAME)
	mkdir -p $(TMP)/$(NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -zx -C $(TMP)/$(NAME)
	find $(TMP)/$(NAME) -type f -name $(NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(NAME)
	chmod +x $(INSTALL_PATH)/$(NAME)
	rm -rf $(TMP)/$(NAME)
endef

define download_tar_bz2
	rm -rf $(TMP)/$(NAME)
	mkdir -p $(TMP)/$(NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -jx -C $(TMP)/$(NAME)
	find $(TMP)/$(NAME) -type f -name $(NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(NAME)
	chmod +x $(INSTALL_PATH)/$(NAME)
	rm -rf $(TMP)/$(NAME)
endef

define download_tar_xz
	rm -rf $(TMP)/$(NAME)
	mkdir -p $(TMP)/$(NAME)
	$(CURL) -o - $(DOWNLOAD_URL) | tar -Jx -C $(TMP)/$(NAME)
	find $(TMP)/$(NAME) -type f -name $(NAME) | xargs -I {} cp -f {} $(INSTALL_PATH)/$(NAME)
	chmod +x $(INSTALL_PATH)/$(NAME)
	rm -rf $(TMP)/$(NAME)
endef


default: info

update/description:
	@github-repo-metadata $(VENDOR) $(REPO_NAME) "index" .description | tee DESCRIPTION

update/version:
	@github-repo-metadata $(VENDOR) $(REPO_NAME) "releases/latest" .tag_name | sed 's/^v//' | tee VERSION

update/license:
	@github-repo-metadata $(VENDOR) $(REPO_NAME) "license" .license.spdx_id | tr '[:lower:]' '[:upper:]' | tee LICENSE

update/release:
	@if [ ! -f RELEASE ]; then \
		echo "0" | tee RELEASE; \
		git add RELEASE; \
	elif [ -n "$$(git status -s `pwd` | grep -v RELEASE)" ]; then \
		if [ -z "$$(git status -s `pwd` | grep RELEASE)" ]; then \
			echo "$$(($${RELEASE}+1))" | tee RELEASE; \
			git add RELEASE; \
		fi; \
	fi

update: update/version update/license update/description update/release
	@exit 0

info:
	@printf "%-20s %s\n" "Vendor:" "$(VENDOR)"
	@printf "%-20s %s\n" "Package:" "$(NAME)"
	@printf "%-20s %s\n" "Version:" "$(VERSION)"
	@printf "%-20s %s\n" "License:" "$(LICENSE)"
	@printf "%-20s %s\n" "Arch:" "$(ARCH)"
	@printf "%-20s %s\n" "OS:" "$(OS)"
	@printf "%-20s %s\n" "Homepage URL:" "$(HOMEPAGE_URL)"
	@printf "%-20s %s\n" "Repo URL:" "$(REPO_URL)"
	@printf "%-20s %s\n" "Download URL:" "$(DOWNLOAD_URL)"
	@printf "%-20s %s\n" "Install Path:" "$(INSTALL_PATH)"

info/short:
	@printf "%-25s %-10s %s\n" "$(NAME)" "$(VERSION)" "$(DESCRIPTION)"
