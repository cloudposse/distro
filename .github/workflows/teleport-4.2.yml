#
# This workflow was created automatically from the `package-template.yml` by running `make -C .github workflows`
# DO NOT EDIT THIS WORKFLOW
#

name: "teleport-4.2"
on:
  push:
    branches:
      - master

    paths:
      - apk/**
      - deb/**
      - rpm/**
      - tasks/**
      - vendor/teleport-4.2/**
      - .github/workflows/teleport-4.2.yml


  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - apk/**
      - deb/**
      - rpm/**
      - tasks/**
      - vendor/teleport-4.2/**
      - .github/workflows/teleport-4.2.yml

jobs:
  matrix:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    outputs:
      package-enabled: ${{ steps.info.outputs.package_enabled }}
      package-matrix:  ${{steps.info.outputs.package_matrix}}
      apk-enabled: ${{ steps.info.outputs.package_enabled && steps.info.outputs.apk_package_enabled }}
    steps:
    - uses: actions/checkout@v2

    - name: Export package build matrix
      shell: bash
      id: info
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: |
        echo setting ouputs
        make -C vendor/teleport-4.2 info/github
        echo
        echo outputs set
        make -C vendor/teleport-4.2 info/github | sed 's/::set/  set/g'


  debug:
    needs: matrix
    runs-on: ubuntu-latest
    steps:
    - name: Export package build matrix
      shell: bash
      id: info
      env:
        PE: ${{ needs.matrix.outputs.package-enabled }}
        PM: ${{ needs.matrix.outputs.package-matrix }}
        AE: ${{ needs.matrix.outputs.apk-enabled }}
      run: |
        echo PE is $PE
        echo PM is $PM
        echo AE is $AE

  # Build for alpine linux
  alpine:
    needs: matrix
    if: github.event_name != 'schedule' && needs.matrix.outputs.apk-enabled != 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # These versions must be strings. E.g. Otherwise `3.10` -> `3.1`
        alpine:
          - '3.12'
    env:
      APK_KEY_RSA: "${{ secrets.APK_KEY_RSA }}"
      APK_PACKAGES_PATH: ${{github.workspace}}/artifacts/${{matrix.alpine}}
      PACKAGER: ops@cloudposse.com
      PACKAGER_PRIVKEY: /dev/shm/ops@cloudposse.com.rsa
      PACKAGER_PUBKEY: ${{github.workspace}}/artifacts/ops@cloudposse.com.rsa.pub

    container: cloudposse/packages-apkbuild:${{matrix.alpine}}
    steps:
      # Checkout the packages repo so we can build the packages as a monorepo
      - name: "Checkout source code at current commit"
        uses: actions/checkout@v2

      - name: debug1
        run: "echo needs.matrix.outputs.apk-enabled is '${{needs.matrix.outputs.apk-enabled}}'"
      - name: debug2
        if: needs.matrix.outputs.apk-enabled
        run: "echo needs.matrix.outputs.apk-enabled satisfied 'if'"

    # Export the apk keys as files from secrets
      - name: "Export keys"
        run: "make -C .github/ export"

      # Build the alpine packages for the matrix version of alpine
      - name: "Build alpine packages"
        run: "make -C vendor/${{github.workflow}} apk"

      # Verify the packages were built or error
      - name: "List packages"
        run: 'find ${APK_PACKAGES_PATH} -type f -name \*.apk | xargs --no-run-if-empty ls -l | grep .'

      # Export the artifact filename including path
      - name: "Set output path to artifact"
        id: artifact
        run: 'echo "::set-output name=path::$(find artifacts/ -type f -name \*.apk)"'

      # Determine which package organization we should use (e.g. dev or prod)
      - name: "Determine package repo"
        shell: bash
        id: repo
        run: |
          if [[ ${GITHUB_REF} == 'refs/heads/master' ]]; then
              echo "::set-output name=org::${{github.repository_owner}}"
          else
              echo "::set-output name=org::${{github.repository_owner}}-dev"
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Publish the artifacts
      - name: "Push artifact to package repository"
        uses: cloudsmith-io/action@v0.5.1
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'alpine'
          owner: '${{steps.repo.outputs.org}}'              # Your Cloudsmith account name or org name (namespace)
          repo: 'packages'                                  # Your Cloudsmith Repository name (slug)
          distro: 'alpine'                                  # Your Distribution  (i.e debian, ubuntu, alpine)
          release: 'any-version'                            # Use "any-version" if your package is compatible with more than one version of alpine linux
          republish: 'true'                                 # Needed if version is not changing
          file: '${{steps.artifact.outputs.path}}'          # Package filename (including path)
          no-wait-for-sync: 'true'                          # Skip the waiting for package synchronisation (i.e. upload only)

  # Build for fpm package manager
  fpm:
    needs: matrix
    if: github.event_name != 'schedule' && needs.matrix.outputs.package-enabled != 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-type: ${{ fromJSON(needs.matrix.outputs.package-matrix) }}
        exclude:
        - package-type: 'apk'
        include:
        - package-type: deb
          builder-version: stable-slim
        - package-type: rpm
          builder-version: centos8

    env:
      PACKAGES_PATH: ${{github.workspace}}/artifacts/${{matrix.package-type}}/any-version
      PACKAGE_RELPATH: artifacts/${{matrix.package-type}}/any-version

    container: cloudposse/packages-${{matrix.package-type}}build:${{matrix.builder-version}}
    steps:
      # Checkout the packages repo so we can build the packages as a monorepo
      - name: "Checkout source code at current commit"
        uses: actions/checkout@v2

      # Build the debian packages for the matrix version of debian
      - name: "Build ${{matrix.package-type}} packages"
        run: "make -C vendor/${{github.workflow}} ${{matrix.package-type}}"

      # Verify the packages were built or error
      - name: "List packages"
        run: |
          echo PWD $(pwd)
          echo PWD -P $(pwd -P)
          ls . /github/workspace || true
          find ${PACKAGES_PATH} -type f -name \*.${{matrix.package-type}} | xargs --no-run-if-empty ls -l | grep .

      # Export the artifact filename including path
      - name: "Set output path to artifact"
        id: artifact
        run: |
          echo PWD $(pwd)
          echo PWD -P $(pwd -P)
          echo "set-output name=path::$(find ${PACKAGE_RELPATH} -type f -name \*.${{matrix.package-type}})"
          echo "::set-output name=path::$(find ${PACKAGE_RELPATH} -type f -name \*.${{matrix.package-type}})"

      # Determine which package organization we should use (e.g. dev or prod)
      - name: "Determine package repo"
        shell: bash
        id: repo
        run: |
          if [[ ${GITHUB_REF} == 'refs/heads/master' ]]; then
              echo "::set-output name=org::${{github.repository_owner}}"
          else
              echo "::set-output name=org::${{github.repository_owner}}-dev"
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Publish the artifacts
      - name: "Push artifact to package repository"
        uses: cloudsmith-io/action@v0.5.1
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: '${{matrix.package-type}}'
          owner: '${{steps.repo.outputs.org}}'              # Your Cloudsmith account name or org name (namespace)
          repo: 'packages'                                  # Your Cloudsmith Repository name (slug)
          distro: 'any-distro'                              # Use "any-distro" since our package is compatible with more than more distribution
          release: 'any-version'                            # Use "any-version" since our package is compatible with more than more version
          republish: 'true'                                 # Needed if version is not changing
          file: '${{steps.artifact.outputs.path}}'          # Package filename (including path)
          no-wait-for-sync: 'true'                          # Skip the waiting for package synchronisation (i.e. upload only)
