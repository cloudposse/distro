#
# This workflow was created automatically from the `package-template.yml` by running `make -C .github workflows`
# DO NOT EDIT THIS WORKFLOW
#

name: "terrahelp"
on:
  push:
    branches:
      - master

    paths:
      - apk/**
      - deb/**
      - vendor/terrahelp/**
      - .github/workflows/terrahelp.yml


  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - apk/**
      - deb/**
      - vendor/terrahelp/**
      - .github/workflows/terrahelp.yml

  schedule:
    # Update packages nightly
    - cron:  '0 0 * * *'

jobs:
  auto-update:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update packages
        shell: bash
        id: update
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          make -C vendor/terrahelp update
          make -C vendor/terrahelp info/github
          make init
          make readme/deps
          make readme

      - name: Create Pull Request
        uses: cloudposse/actions/github/create-pull-request@0.20.0
        with:
          token: ${{ secrets.GITHUB_BOT_TOKEN }}
          commit-message: Update ${{ steps.update.outputs.package_name }} to ${{ steps.update.outputs.package_version }}
          title: Update ${{ steps.update.outputs.package_name }} to ${{ steps.update.outputs.package_version }}
          body: |-
            ## what

            This is an auto-generated PR that updates the ${{ steps.update.outputs.package_name }} package version.
            
            | Meta              | Details                                      |
            |:------------------|:---------------------------------------------|
            | **Package Name**  | `${{ steps.update.outputs.package_name }}`   |
            | **Vendor**        | @${{ steps.update.outputs.vendor }}          |
            | **Version**       | ${{ steps.update.outputs.package_version }}  |
            | **License**       | ${{ steps.update.outputs.package_license }}  |
            | **Repo**          | ${{ steps.update.outputs.package_repo_url }} |
            | **Arch**          | ${{ steps.update.outputs.arch }}             |
            | **OS**            | ${{ steps.update.outputs.os }}               |
            | **Download URL**  | ${{ steps.update.outputs.download_url }}     |

            ## why

            Publish the latest release of `${{ steps.update.outputs.package_name }}` to our package repository.

          branch: auto-update/${{ steps.update.outputs.package_name }}-${{ steps.update.outputs.package_version }}
          base: master
          delete-branch: true
          labels: |
            auto-update
            vendor/${{ steps.update.outputs.package_name }}

  # Build for alpine linux
  alpine:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # These versions must be strings. E.g. Otherwise `3.10` -> `3.1`
        alpine:
          - '3.12'
    env:
      APK_KEY_RSA: "${{ secrets.APK_KEY_RSA }}"
      APK_PACKAGES_PATH: ${{github.workspace}}/artifacts/${{matrix.alpine}}
      PACKAGER: ops@cloudposse.com
      PACKAGER_PRIVKEY: /dev/shm/ops@cloudposse.com.rsa
      PACKAGER_PUBKEY: ${{github.workspace}}/artifacts/ops@cloudposse.com.rsa.pub

    container: cloudposse/packages-apkbuild:${{matrix.alpine}}
    steps:
      # Checkout the packages repo so we can build the packages as a monorepo
      - name: "Checkout source code at current commit"
        uses: actions/checkout@v2

      # Export the individual package's configuration as GitHub Action outputs
      - name: "Export package config as outputs"
        id: config
        run: "make -C vendor/${{github.workflow}} info/github"

      # Export the apk keys as files from secrets
      - name: "Export keys"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        run: "make -C .github/ export"

      # Build the alpine packages for the matrix version of alpine
      - name: "Build alpine packages"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        run: "make -C vendor/${{github.workflow}} apk"

      # Verify the packages were built or error
      - name: "List packages"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        run: 'find ${APK_PACKAGES_PATH} -type f -name \*.apk | xargs --no-run-if-empty ls -l | grep .'

      # Export the artifact filename including path
      - name: "Set output path to artifact"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        id: artifact
        run: 'echo "::set-output name=path::$(find artifacts/ -type f -name \*.apk)"'

      # Determine which package organization we should use (e.g. dev or prod)
      - name: "Determine package repo"
        shell: bash
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        id: repo
        run: |
          if [[ ${GITHUB_REF} == 'refs/heads/master' ]]; then
              echo "::set-output name=org::${{github.repository_owner}}"
          else
              echo "::set-output name=org::${{github.repository_owner}}-dev"
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Publish the artifacts
      - name: "Push artifact to package repository"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.apk_package_enabled == 'true'
        uses: cloudsmith-io/action@v0.5.1
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'alpine'
          owner: '${{steps.repo.outputs.org}}'              # Your Cloudsmith account name or org name (namespace)
          repo: 'packages'                                  # Your Cloudsmith Repository name (slug)
          distro: 'alpine'                                  # Your Distribution  (i.e debian, ubuntu, alpine)
          release: 'any-version'                            # Use "any-version" if your package is compatible with more than one version of alpine linux
          republish: 'true'                                 # Needed if version is not changing
          file: '${{steps.artifact.outputs.path}}'          # Package filename (including path)
          no-wait-for-sync: 'true'                          # Skip the waiting for package synchronisation (i.e. upload only)

  # Build for alpine linux
  debian:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        any-release:
          - 'any-version'

    env:
      DEB_PACKAGES_PATH: ${{github.workspace}}/artifacts/${{matrix.any-release}}

    container: cloudposse/packages-debbuild:stable-slim
    steps:
      # Checkout the packages repo so we can build the packages as a monorepo
      - name: "Checkout source code at current commit"
        uses: actions/checkout@v2

      # Export the individual package's configuration as GitHub Action outputs
      - name: "Export package config as outputs"
        id: config
        run: "make -C vendor/${{github.workflow}} info/github"

      # Build the debian packages for the matrix version of debian
      - name: "Build debian packages"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.deb_package_enabled == 'true'
        run: "make -C vendor/${{github.workflow}} deb"

      # Verify the packages were built or error
      - name: "List packages"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.deb_package_enabled == 'true'
        run: 'find ${APK_PACKAGES_PATH} -type f -name \*.deb | xargs --no-run-if-empty ls -l | grep .'

      # Export the artifact filename including path
      - name: "Set output path to artifact"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.deb_package_enabled == 'true'
        id: artifact
        run: 'echo "::set-output name=path::$(find artifacts/ -type f -name \*.deb)"'

      # Determine which package organization we should use (e.g. dev or prod)
      - name: "Determine package repo"
        shell: bash
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.deb_package_enabled == 'true'
        id: repo
        run: |
          if [[ ${GITHUB_REF} == 'refs/heads/master' ]]; then
              echo "::set-output name=org::${{github.repository_owner}}"
          else
              echo "::set-output name=org::${{github.repository_owner}}-dev"
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Publish the artifacts
      - name: "Push artifact to package repository"
        if: steps.config.outputs.package_enabled == 'true' && steps.config.outputs.deb_package_enabled == 'true'
        uses: cloudsmith-io/action@v0.5.1
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'deb'
          owner: '${{steps.repo.outputs.org}}'              # Your Cloudsmith account name or org name (namespace)
          repo: 'packages'                                  # Your Cloudsmith Repository name (slug)
          distro: 'any-distro'                              # Use "any-distro" since our package is compatible with more than more distribution
          release: 'any-version'                            # Use "any-version" since our package is compatible with more than more version
          republish: 'true'                                 # Needed if version is not changing
          file: '${{steps.artifact.outputs.path}}'          # Package filename (including path)
          no-wait-for-sync: 'true'                          # Skip the waiting for package synchronisation (i.e. upload only)
